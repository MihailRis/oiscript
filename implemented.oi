a = 1
b = 0

# functions
func f(c, d, e):
    pass

# procedures
proc p(f, g, h):
    pass

# if-elif-else operator
if a:
    pass
elif b:
    pass
else:
    pass

# while loop
while a:
    pass

# while with else
while a:
    pass
else: # executed if loop wasn't broken by 'break'
    pass

# one-word operators
break
continue
return

# foreach loop
for i : x:
    pass

# for loop i from 0 to 99
for i : 100:
    pass

# C-like for-loop
for i = 0; i < x; i+=1:
    pass

# Extend script namespace with object members
include object

skip frames # <- interrupt and skip defined count of frames
# or
skip # <- just interrupt (same as skip 0)

wait milliseconds # <- wait defined count of milliseconds
wait 1000 # <- wait one second

types:
    number,
    char,
    bool,
    string,
    vector,
    object,
    function,
    process,

string:
    join(iterable) -> string
    split(pattern) -> vector
    index(substring) -> number
    index(substring, from) -> number
range:
    fit(x) -> number
    unfit(x) -> number
collection:
    add(...x) -> none
    remove(...x) -> none
    clear() -> none

stdlib:
    functions:
        int(x) -> number # convert value to integer or parse string
        bool(x) -> bool
        rand() -> number # Random.nextFloat()
        len(x) -> number # alternative of .len attribute
        vector(iterable) -> vector # create vector from iterable
        chr(code) -> char # cast integer to char
        keys(object) -> vector # vector of attribute names of OiObject
        print(...) -> none
    constants:
        _version -> string
        endl -> string

math:
    functions:
        sqrt(x) -> number
        sin(x) -> number
        cos(x) -> number
        tan(x) -> number
        atan(x) -> number
        asin(x) -> number
        acos(x) -> number
        min(...numbers) -> number
        max(...numbers) -> number
        sum(vector) -> number
        avg(vector) -> number
    constants:
        PI -> number
        E -> number


Operators:
    unary:
        +, -, not, ! (same as not)
    binary:
        +, -, *, /, %, //, **
        >, <, ==, !=, <=, >=,
    ternary:
        ?:

Properties:
    .len for strings and collections

# TODO:
- increment and decrement
- R-like ranges:
    b = 1:10:2 # [1, 3, 5, 7, 9]
- Python-like try-except